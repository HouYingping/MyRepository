#include<iostream>
//#include<string>
#include<deque>
#include<algorithm>
using namespace std;
/*
双端数组

vecotr对于头部的插入删除效率低，数据量越大，效率月底
deque相对而言，对头部的插入删除速度比vector快
vector访问元素时的速度会比deque快，与内部实现有快
deque内部有个中控器，维护每段缓冲区中的内容，缓冲区中存放真实数据
中控器维护每个缓冲区的地址，是得使用deque时像一片连续的内存空间
deque容器的额迭代器也是支持随机访问的

赋值
和vector一样
operato=
assign(deq.begin(),deq.end())
assign(num,elem)

大小操作
deq.empty()
deq.size()
deq.resize(num)
deq.resize(num,elem)

增删
push_buck()		
push_front()
pop_back()
pop_front()
insert(*it,elem)	insert(*it,num,elem)   insert(*it,it2.bengin(),it2.end())
erase(it)		erase(it.begin(),it.end())		
clear()

可以根据下标获取元素
at()
第一个元素	front()
最后一个元素	back()

sort(deq.begin(),deq.end())		// 根据区间排序
*/

void printDeque(const deque<int> &deq) {
	for (deque<int>::const_iterator it = deq.begin(); it < deq.end();it++) {	// 只读的迭代器
		cout << *it << " " << endl;
	}
	cout << endl;
}
void test() {
	deque<int> deq;
	for (int i = 0;i < 10;i++) {
		//deq.push_back(i);
		deq.push_front(i);
	}
	printDeque(deq);
	// 构造
	deque<int> deq2(deq.begin(),deq.end());
	deque<int> deq3(10, 250);
	deque<int> deq4(deq3);
	printDeque(deq2);
	printDeque(deq3);
	printDeque(deq4);
}

int main() {
	test();
	system("pause");
	return 0;
}

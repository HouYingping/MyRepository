#include<iostream>
#include<string>
#include<set>
//using namespace std;
/*
set容器
所有元素都会在插入时自动被排序		和Python很不同
set/multiset属于关联式容器，底层结构是用“二叉树”实现

set和multiset的区别：
	set不允许容器中有重复的元素
	multiset允许容器中有重复的元素
*/
void printSet(const std::set<int> &s) {
	for (std::set<int>::const_iterator it = s.begin();it != s.end();it++) {
		std::cout << *it << "\t";
	}
	std::cout << std::endl;
}
void test() {
	//构造
	std::set<int> s1;
	for (int i = 9;i >= 0 ;i--) {	// 默认会排序插入，即使是倒序插入的输出结果也不会变
		s1.insert(i);				// 插入数据，有且只有insert
	}
	s1.insert(5);		// 插入重复的数据	不报错，但是无变化
	printSet(s1);

	//拷贝构造
	std::set<int> s2(s1);
	printSet(s2);
	//赋值
	std::set<int> s3 = s2;
	printSet(s3);
}
void test3() {
	std::set<int> s1;
	s1.insert(5);
	s1.insert(3);
	s1.insert(2);
	s1.insert(6);
	printSet(s1);
	//删除
	s1.erase(s1.begin());
	std::cout << "删除第一个元素后:" << std::endl;
	printSet(s1);
	// 删除具体元素
	s1.erase(5);
	printSet(s1);
	//清空
	// s1.erase(s1.begin(),s1.end());
	// s1.clear();
	// printSet(s1);

	//查找	find(key),找到返回迭代器(不是位置)，找不到返回set.end()
	if(s1.find(30) != s1.end()){
		std::cout <<"找到30了" << std::endl;
	}
	else {
		std::cout << "找不到30" << std::endl;
	}
	//统计key元素的个数，不是0就是1，multiset的话可以有其他情况
	std::cout << "3的个数：" << s1.count(3) << std::endl;

}
void test2() {
	std::set<int> s1;
	for (int i = 5;i > 0;i--) {
		s1.insert(i);			
	}
	std::cout << "s1大小：" << s1.size() << std::endl;
	std::cout << "s1是否为空：" << s1.empty() << std::endl;
	std::set<int> s2;
	s2.insert(10);
	s2.insert(20);
	s2.insert(30);
	s2.insert(40);
	s2.insert(50);
	printSet(s1);
	printSet(s2);
	std::cout << "交换后：" << std::endl;
	s1.swap(s2);
	printSet(s1);
	printSet(s2);

}
//set和mulitset的区别
void test4() {
	std::set<int> s2;
	s2.insert(10);
	s2.insert(20);
	s2.insert(30);
	s2.insert(40);
	std::pair<std::set<int>::iterator,bool> ret = s2.insert(50);
	if (ret.second) {
		std::cout << "第一次插入成功！" << std::endl;
	}
	else {
		std::cout << "第一次插入失败！" << std::endl;
	}
	ret = s2.insert(50);
	if (ret.second) {
		std::cout << "第二次插入成功！" << std::endl;
	}
	else {
		std::cout << "第二次插入失败！" << std::endl;
	}
	printSet(s2);
	//multiset在插入的时候就不会检测
	std::multiset<int> ms;
	ms.insert(10);
	ms.insert(10);
	ms.insert(10);
	ms.insert(10);
	for (std::multiset<int>::iterator it = ms.begin();it != ms.end();it++) {
		std::cout <<*it<<"\t";
	}
	std::cout << std::endl;
}
int main() {
	test4();
	system("pause");
	return 0;
}

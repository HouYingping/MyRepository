#include<iostream>
#include<string>
using namespace std;
/*
C++编译器至少给一个类添加4个函数
	1.默认构造函数（无参，函数体为空）
	2.默认析构函数（无参，函数体为空）
	3.默认拷贝构造函数，对属性值进行值拷贝
	4.复制运算符operator=，对实行进行值拷贝
*/
class Person {
public:
	Person(int age) {
		//m_Age = age;
		m_Age = new int(age);
		//cout << "this" << this << endl;
	}
	~Person() {		//奔溃的原因：内存重复释放
		if (m_Age != NULL) {
			delete m_Age;
			m_Age = NULL;
		}
	}
	Person& operator=(const Person &p) {
		if (m_Age != NULL) {
			delete m_Age;
			m_Age = NULL;
		}
		m_Age = new int(*p.m_Age);
		return *this;
	}
	bool operator==(const Person &p) {
		if (*m_Age == *p.m_Age) {
			return true;
		}
		else{
			return false;
		}
	}
	int *m_Age;
};
class MyPrint {
public:
	void operator()(string s) {		// 对 () 的重载，优于使用起来非常类似于函数调用，因此称为伪函数
		cout << s << endl;
	}
};
void test() {
	Person p1 = 18;
	Person p2 = 20;
	p2 = p1;			// 属性值默认会指向同一个内存
	cout << "p1的年龄：" << *p1.m_Age << p1.m_Age << endl;
	cout << "p2的年龄：" << *p2.m_Age << p2.m_Age << endl;

	if (p1 == p2) {
		cout << "p1和p2是相等的" << endl;
	}
	else {
		cout << "p1和p2是不相等的" << endl;
	}
	MyPrint myPrint;
	myPrint("hyp is good boy!");
}
int main() {
	test();
	system("pause");
	return 0;
}

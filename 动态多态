#include<iostream>
#include<string>
using namespace std;
/*
多态：静态多态：函数重载和运算符重载，复用函数名
	  动态多态：派生类和虚函数实现运行时多态

动态多态：	运行时确定函数地址
	1.继承
	2.子类重写了父类的虚函数（重写，除了函数体中的逻辑实现都一样）
使用：
	父类的指针或者引用，执行子类对象
*/
class Animal{
public:
	void speak() {					// 比原来多了一个虚函数表指针（vfptr）
		cout << "Animal 在说话" << endl;
	}
};
class Cat : public Animal{
	virtual void speak() {
		cout << "Cat 在说话" << endl;
	}
};
//地址早就绑定，在编译阶段就确定了函数地址
//用虚函数类似占位的作用
void dospeak(Animal &animal) {
	animal.speak();
}
void test() {
	Cat cat;
	dospeak(cat);
}
void test2() {
	Animal animal;
	cout << "Animal实例对象所占内存大小：" << sizeof(animal) << endl;
}

int main() {
	test();
	//test2();
	system("pause");
	return 0;
}

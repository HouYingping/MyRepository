#include <iostream>
using namespace std;
#include <string>

//交换值
void swap1(int a, int b) {
	int temp = a;
	a = b;
	b = temp;
	/*cout << a << endl;
	cout << b << endl;*/
}
void swap2(int *a,int *b) {
	int temp = *a;
	*a = *b;
	*b = temp;
}
void swap3(int &a,int &b) {
	int temp = a;
	a = b;
	b = temp;
}

int& test1() {		//不要返回局部变量的引用
	int f = 10;
	return f;
}
int& test2() {
	static int ref = 100; //静态变量，存放在全局区，程序结束后才释放
	return ref;
}
int main() {

	//引用 语法		数据类型 &别名 = 原名      本质是给变量起别名，操作的是同一块内存
	int a = 10;
	int b = 30;
	int &c = a;		// 引用的定义，需要进行初始化
	c = b;			// 赋值操作而非更改引用
	cout << a << endl;
	cout << b << endl;
	cout << c << endl;

	int d = 20, e = 50;

	swap1(d,e);		//值传递
	swap2(&d,&e);	//地址传递
	cout << "地址传递" << d << endl;
	cout << "地址传递" << e << endl;
	swap3(d, e);	//引用传递
	cout << "引用传递" << d << endl;
	cout << "引用传递" << e << endl;

	//返回
	int &f = test1();
	cout << f << endl;
	cout << f << endl;

	int &ref = test2();
	cout << ref << endl;
	cout << ref << endl;

	//函数返回值是引用，函数调用可以作为左值
	test2() = 10000;		//原名 复制为10000	
	cout << ref << endl;	//别名当然也跟着变了
	cout << ref << endl;

	system("pause");
	return 0;
}

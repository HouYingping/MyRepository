#include<iostream>
#include<string>
#include<algorithm>
#include<functional>	// 内建函数对象头文件
#include<vector>
using namespace std;

/*
STL内建了一些函数对象
算术仿函数:实现四则运算
*/
void test() {
	// 取反仿函数
	negate<int> neg;
	cout << neg(50) << endl;
	//二元仿函数
	//plus	加
	plus<int> p;
	cout << p(10,20) << endl;
	//minus	减
	//multiplies	乘
	//divides	除
	//modules	取模
}
/*
关系仿函数
*/
void test2() {
	//bool equal_to	等于
	//bool not_equal_to	等于
	//bool greater	大于
	//bool greater_equal	大于等于
	//bool less	小于
	//bool less_equal	小于等于
	vector<int> v;
	v.push_back(3);
	v.push_back(2);
	v.push_back(4);
	v.push_back(5);
	v.push_back(1);
	sort(v.begin(),v.end(),greater<int>());
	for (vector<int>::iterator it = v.begin();it < v.end();it++) {
		cout << *it << endl;
	}
}
/*
逻辑仿函数
*/
void test3() {
	//logical_and	逻辑与
	//logical_or	逻辑或
	//logical_not	逻辑非

	vector<bool> v;
	v.push_back(true);
	v.push_back(false);
	v.push_back(true);
	v.push_back(true);
	v.push_back(false);
	for (vector<bool>::iterator it = v.begin();it < v.end();it++) {
		cout << *it << "\t";
	}
	cout << endl;

	//利用逻辑非，将容器v搬运到 容器v2中，并执行取反操作
	vector<bool> v2;
	v2.resize(v.size());		// 根据v开闭空间，否则搬移是不能进行的
	transform(v.begin(), v.end(),v2.begin(),logical_not<bool>());
	for (vector<bool>::iterator it = v2.begin();it < v2.end();it++) {
		cout << *it << "\t";
	}
	cout << endl;
}
int main() {
	test3();
	system("pause");
	return 0;
}

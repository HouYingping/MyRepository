#include<iostream>
#include<string>
using namespace std;	//标准命名空间
//函数模板
template<typename T>	// 其中typename可以替换成class
// 声明一个模板，告诉编译器后面代码中跟着的T不要报错，T是一个通用数据类型
void mySwap(T &a,T &b) {	// 自动类型推导，在一次运算过程中，T只能表示一种数据类型
	T temp = a;
	a = b;
	b = temp;
}
template<class T1,class T2>		// 这个就像是Python中的装饰器,不能有多个template语句，但是可以定义多一个任任意性数据
void mySwap2(T1 a, T2 b) {	
	cout << "类型：" << typeid(a).name() << "，值：" << a << endl;
	cout << "类型：" << typeid(b).name() << "，值：" << b << endl;
}
template<class T>
void func() {
	cout << "模板定义后必须指定类型，否则报错" << endl;
}
int main() {
	int a = 20;
	int b = 30;
	mySwap(a, b);
	cout << "a: " << a << "b:" << b << endl;

	double c = 2.2;
	double d = 3.3;
	mySwap(c, d);
	cout << "c = " << c << " d = " << d << endl;

	char ch = 'a';
	//mySwap(a,ch);	// 类型不一样，不能执行
	mySwap2(a, ch);		// 这里a的值和b交换过了

	//func();	// 没有指定模板参数类型，报错

	system("pause");
	return 0;
}

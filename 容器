#include<iostream>
#include <string>
#include<vector>
#include<algorithm>		// 标准算法的头文件
using namespace std;
/*
vector  数据结构和数组非常相似，也称为单端数组
vecotr与数组的区别在于，数组是静态空间，而vector可以动态扩展，这可以说是对于数组长度局限性方面的补充
动态扩展并不是在原来的存储空间之后续接新的空间，而是找更大的内存空间，然后将原数据拷贝到新空间，释放原空间
扩展多少是有STL中的算法计算出来的

*/
void printVector(vector<int> &v) {
	for (vector<int>::iterator it = v.begin();it < v.end();it++) {
		cout << *it << "\t";
	}
	cout << endl;
}
class Person {
public:
	Person(string name,int age) {
		this->name = name;
		this->age = age;
	}
	string name;
	int age;
};

void myPrint(const Person &p) {
	cout << "姓名：" << p.name << ",年龄：" << p.age << endl;
}

//vector
void test() {
	// 创建了一个vector容器、数组
	vector<Person> v;

	Person p1("aaa",19);
	Person p2("bbb", 13);
	Person p3("ccc", 15);
	Person p4("ddd", 29);
	Person p5("eee", 17);

	//向容器中出入数据   尾插法
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);
	v.push_back(p5);

	//通过迭代器访问
	vector<Person>::iterator itBegin = v.begin();		// 起始迭代器  指向容器中第一个元素
	vector<Person>::iterator itEnd = v.end();		// 结束迭代器  指向容器中最后一个元素的下一个位置
	//vector<Person>::iterator itRBegin = v.rbegin();		// 执行容器中倒数最后一个元素
	//vector<Person>::iterator itREnd = v.rend();		// 执行容器中第一个元素的前一个位置


	cout << "v.begin()的数据类型" << typeid(itBegin).name() << endl;
	cout << "v.end()的数据类型" << typeid(itEnd).name() << endl;

	// (1)						迭代器是一次性的
	/*while (itBegin!=itEnd)
	{
		cout << *itBegin << endl;
		itBegin++;
	}*/

	//(2)
	//for (vector<Person>::iterator it = v.begin();it!=v.end();it++) {
	//	//cout << "姓名：" << (*it).name << "年龄：" << (*it).age << endl;
	//	cout << "姓名：" << it->name << ",年龄：" << it->age << endl;
	//}

	//(3)
	for_each(v.begin(), v.end(), myPrint);		//  传入的是容器中的数据

}
// 容器嵌套
void test2() {
	vector<vector<int>> v;
	vector<int> v1;
	vector<int> v2;
	vector<int> v3;
	vector<int> v4;
	for (int i = 0;i < 4; i++) {
		v1.push_back(i+1);
		v2.push_back(i+2);
		v3.push_back(i+3);
		v4.push_back(i+4);
	}
	v.push_back(v1);
	v.push_back(v2);
	v.push_back(v3);
	v.push_back(v4);
	for (vector < vector<int>>::iterator it = v.begin();it < v.end();it++) {
		for (vector<int>::iterator vit = (*it).begin();vit < (*it).end();vit++) {		// 不要忘了，迭代器是类似指针的存在
			cout << *vit << "\t";
		}
		cout << endl;
	}
}
// vector 构造
void test3() {
	/*构造函数
	vector(T)	采用模板实现类实现，默认构造函数
	vector<T>(v.begin(),v.end());		将v[v.begin(),v.end())区间中的元素拷贝给本身
	vector<T>(n,elem)			构造有n个elem元素的vector容器
	vector<T>(vector)		拷贝构造
	*/
	vector<int> v1;			// 默认构造
	for (int i = 0;i < 5;i++) {
		v1.push_back(i);
	}
	vector<int> v2(v1.begin(),v1.end());	// 区间构造
	for (vector<int>::iterator it = v2.begin();it < v2.end();it++) {
		cout << *it <<"\t";
	}
	cout << endl;

	vector<int> v3(5,250);
	for (vector<int>::iterator it = v3.begin();it < v3.end();it++) {
		cout << *it << "\t";
	}
	cout << endl;

	// 拷贝构造
	vector<int> v4(v2);
	for (vector<int>::iterator it = v4.begin();it < v4.end();it++) {
		cout << *it << "\t";
	}
	cout << endl;
}
// vector 赋值
void test4() {
	/*
	vector& operator=(const vector &vec);	重载等号操作符
	assign(beg,end)				将[beg,end)区间中的数据拷贝赋值
	assign(n,elem)			将n个elem拷贝赋值给本身
	*/
	vector<int> v1;			// 默认构造
	for (int i = 0;i < 10;i++) {
		v1.push_back(i);
	}
	printVector(v1);
	vector<int> v2=v1;
	printVector(v2);
	vector<int> v3;
	v3.assign(v1.begin(), v1.end());
	printVector(v3);

	vector<int> v4;
	v4.assign(6,250);
	printVector(v4);
}
// vector 属性
void test5() {
	vector<int> v1;
	for (int i = 0;i < 10;i++) {
		v1.push_back(i);
	}
	printVector(v1);
	if (v1.empty()) {
		cout << "v1为空！！！" << endl;
	}
	else {
		cout << "v1不为空！" << endl;
	}
	cout << "v1的容量：" << v1.capacity() << endl;
	cout << "v1的大小：" << v1.size() << endl;

	//重新指定vector大小
	v1.resize(15);				// 如果大于原来的大小时，则默认用0填充
	//v1.resize(15,250);		//	通过第二个参数指定填充元素
	printVector(v1);
	v1.resize(5);				// 如果比原来的大小，则多余元素删除
	printVector(v1);
}
/*/
插入和删除
push_back()		尾插
pop_back()		删尾
insert（const_iterator pos,ele）	通过迭代器在指定位置插入元素，并不是下标
insert(const_iterator pos, int count,ele)	...
erase(const_iterator start,const_iterator end)		...
clear()			清空

operator[]	获取指定下标的元素
at()		同上
front()		获取第一个元素
back()		后获取最后一元素
*/
// 容器交换			名字和容器的连接交换了
// vector<T>(v)swap(v)		可以用其实现一个收缩内存的效果，也是手动释放内存	根据已有容器创建一个容量小的但是及size相同的容器，然后进行交换
void test6() {
	vector<int> v1;
	for (int i = 0;i < 10;i++) {
		v1.push_back(i);
	}
	vector<int> v2;
	for (int i = 10;i >0;i--) {
		v2.push_back(i);
	}
	printf("交换后：\n");
	printVector(v1);
	printVector(v2);
	v1.swap(v2);
	printf("交换后：\n");
	printVector(v1);
	printVector(v2);
}
int main() {
	//test();
	//test2();
	//test3();
	//test4();
	//test5();
	test6();
	system("pause");
	return 0;
}
